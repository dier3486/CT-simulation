function interptable = omiga4table(Coeffgamma, Nsample, maxFOV, reconFOV, SID, Nslice, gantrytilt)
% prepare the table for Sobolev space linearized omiga-4-points interpoloation method
% interptable = omiga4table(x);

if nargin<6
    gantrytilt = 0;
end
if length(Nsample)<2
    Nsample(2) = Nsample(1);
end

% hard code paramters
Nfill0 = single(4);

% recon FOV
Rs = single(min(maxFOV, reconFOV*sqrt(2))/SID);
% zeta, eta and zz sampling
zeta_samp = linspace(-Rs/2, Rs/2, Nsample(1));
eta_samp = linspace(-Rs/2, Rs/2, Nsample(1));
zz_samp = single(-Nslice+1:Nslice);
% (zeta, eta) mesh
[zeta_s, eta_s] = meshgrid(zeta_samp, eta_samp);
% homeomorphic axial reconstruction geometry
t_samp1 = axialconehomeomorph(eta_s, zeta_s, Nslice, gantrytilt);
Nleft = -Nslice/2+1-Nfill0+3/2;
t_samp1(t_samp1<Nleft) = Nleft;
Nright = Nslice/2+Nfill0-3/2;
t_samp1(t_samp1>Nright) = Nright;
t_samp1 = t_samp1 + Nslice/2+Nfill0;

% alpha-beta interp prepare
Nfourp = sNsample(2);
alpha_intp = single(linspace(0, 1, Nfourp+1)');
index_intp = single(1:Nfourp+1);
Nintp_gpu = gpuArray(single(Nfourp));


% to return
Zinterp.Nfill0 = Nfill0;
Zinterp.Zeta = zeta_samp;
Zinterp.Eta = eta_samp;
Zinterp.zz = zz_samp;
Zinterp.fourpointindex = index_intp;
Zinterp.Nfourp = Nintp_gpu;

end
