function Dataflow = projectionscan(SYS, method, echo_onoff)
% the projection simulation

if nargin<2 || isempty(method)
    method = 'default';
end
if nargin<3
    echo_onoff = true;
end

% GPU?
GPUonoff = SYS.simulation.GPUonoff>0 && ~isempty(SYS.simulation.GPUinfo);

% system components
source = SYS.source;
bowtie = SYS.collimation.bowtie;
filter = SYS.collimation.filter;
detector = SYS.detector;
if isfield(SYS, 'phantom')
    phantom = SYS.phantom;
else
    phantom = [];
end

% parameters of the system
% focalposition = source.focalposition;
Nfocal = source.focalnumber;
Npixel = double(detector.Npixel);
Nslice = double(detector.Nslice);
Np = Npixel * Nslice;
Nw = source.Wnumber;

% prepare the samplekeV, viewangle and couch
[samplekeV, viewangle, couch, shotindex, gantrytilt] = scanprepare(SYS);
NkeVsample = length(samplekeV(:));
Nview = length(viewangle(:));
Nviewpf = Nview/Nfocal;

% spectrums normalize
sourcespect = SYS.source.spectrum;
for ii = 1:Nw
    sourcespect{ii} = sourcespect{ii}./sum(sourcespect{ii}.*samplekeV);
end
% detector response
detspect = cell(1, Nw);
respnorm = sum(samplekeV)/mean(detector.response * samplekeV(:), 1);
for ii = 1:Nw
    detspect{ii} = detector.response.*sourcespect{ii}.*respnorm;
    if size(detspect{ii}, 1) == 1
        detspect{ii} = repmat(detspect{ii}, Np*Nfocal, 1);
    else
        detspect{ii} = repmat(detspect{ii}, Nfocal, 1);
    end
end
% detector pixelarea
if size(detector.pixelarea(:), 1) == 1
    detpixelarea = detector.pixelarea;
else
    detpixelarea = repmat(detector.pixelarea(:), Nfocal, 1);
end

% detector resample
if any(SYS.simulation.detectsample>1)
    [detposition, detweight] = detectorresample(detector, SYS.simulation.detectsample);
else
    detposition = detector.position;
    detweight = 1;
end
Ndetresmp = size(detweight, 1);

% focal resample
if any(SYS.simulation.focalsample>1)
    [focalposition, focalweight] = focalresample(source.focalposition, source.focalsize, SYS.simulation.focalsample);
else
    focalposition = source.focalposition;
    focalweight = 1;
end
Nfocalresmp = size(focalweight, 1);

% off-focal
if SYS.simulation.offfocal && isfield(SYS.source, 'offfocal')
    offfocalpos = source.focalposition(:) + repmat(reshape(SYS.source.offfocal.samplepos, 3, []), Nfocal, 1);
    offfocalpos = reshape(offfocalpos, Nfocal, []);
    offfocalweight = SYS.source.offfocal.weight(:);
    Nofffocalsmp = size(offfocalweight, 1);
else
    offfocalpos = [];
    offfocalweight = [];
    Nofffocalsmp = 0;
end
focalposition = [focalposition offfocalpos];

% det-focal resample grid
[focalindex, detindex] = meshgrid(1:Nfocalresmp+Nofffocalsmp, 1:Ndetresmp);
weight = detweight*[focalweight; offfocalweight]';
Nresample = size(weight(:),1);

% ini P, Pair  & Eeff
P = cell(1, Nw);
Pair = cell(1, Nw);
Eeff = cell(1, Nw);
switch lower(method)
    case {'default', 1, 'photoncount', 2}
        P(:) = {zeros(Np, Nview)};
        Pair(:) = {zeros(Np*Nfocal, 1)};
        Eeff(:) = {zeros(Np, Nview)};
    case {'energyvector', 3}
        P(:) = {zeros(Np*Nview, NkeVsample)};
        Pair(:) = {zeros(Np*Nfocal, NkeVsample)};
        % No Eeff
    otherwise
        % error
        error(['Unknown projection method: ' method]);
end


for ismp = 1:Nresample
    focalposition_ismp = focalposition(:, (1:3)+(focalindex(ismp)-1)*3);
    detposition_ismp = detposition(:, (1:3)+(detindex(ismp)-1)*3);
    [P_ismp, Pair_ismp, Eeff_ismp] = projectionscan2(focalposition_ismp, detposition_ismp, bowtie, filter, samplekeV, ...
                                     detspect, detpixelarea, viewangle, couch, gantrytilt, phantom, method, echo_onoff, GPUonoff);
    for iw = 1:Nw
        P{iw} = P{iw} + P_ismp{iw}.*weight(ismp);
        Pair{iw} = Pair{iw} + Pair_ismp{iw}.*weight(ismp);
        Eeff{iw} = Eeff{iw} + Eeff_ismp{iw}.*weight(ismp);
    end
end
for iw = 1:Nw
    Eeff{iw} = Eeff{iw}./sum(weight(:));
end

% remove nan (could due to negative thick filter)
for ii = 1:Nw
    P{ii}(isnan(P{ii})) = 0;
end

% return
Dataflow = struct();
Dataflow.samplekeV = samplekeV;
Dataflow.viewangle = viewangle;
Dataflow.couch = couch;
Dataflow.shotindex = shotindex;
Dataflow.P = P;
Dataflow.Eeff = Eeff;
Dataflow.Pair = Pair;

end


function [offfocalpos, offfocalweight] = offfocalsample(focalposition, offfocal)
% off-focal resample

Nfocal = size(focalposition, 1);

if isfield(offfocal, 'samplepos')
    offfocalpos = focalposition(:) + repelem(reshape(offfocal.samplepos, 3, []), Nfocal, 1);
    offfocalpos = reshape(offfocalpos, Nfocal, []);
    offfocalweight = offfocal.weight(:);
elseif isfield(offfocal, 'width')
    % simplified defination of off-focal
    Nsf = 10;
    X = (-Nsf+1/2:Nsf-1/2).*(offfocal.width/Nsf);
    offfocalpos = focalposition(:) + [repelem(X, Nfocal, 1); zeros(Nfocal*2, Nsf*2)];
    offfocalpos = reshape(offfocalpos, Nfocal, []);
    offfocalweight = ones(Nsf*2, 1).*(offfocal.intensity/Nsf/2);
else
    
end
end